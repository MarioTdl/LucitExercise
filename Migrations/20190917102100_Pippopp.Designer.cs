// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using esercizioUnikey.Core;

namespace esercizioUnikey.Migrations
{
    [DbContext(typeof(DbContextUnikey))]
    [Migration("20190917102100_Pippopp")]
    partial class Pippopp
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("esercizioUnikey.Core.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataDiFondazione");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Profile");

                    b.Property<int>("TechType");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("esercizioUnikey.Core.Model.Dipendente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CompanyId");

                    b.Property<DateTime>("DataAssunzione");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Dipendente");
                });

            modelBuilder.Entity("esercizioUnikey.Core.Model.Ordine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCreazione");

                    b.Property<int>("PersonaId");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Ordine");
                });

            modelBuilder.Entity("esercizioUnikey.Core.Model.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Azienda");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Indirizzo");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int>("Profile");

                    b.HasKey("Id");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("esercizioUnikey.Core.Model.Prodotto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("OrdineId");

                    b.Property<double>("Prezzo");

                    b.HasKey("Id");

                    b.HasIndex("OrdineId");

                    b.ToTable("Prodotto");
                });

            modelBuilder.Entity("esercizioUnikey.Core.Model.Dipendente", b =>
                {
                    b.HasOne("esercizioUnikey.Core.Model.Company", "Company")
                        .WithMany("Dipendenti")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("esercizioUnikey.Core.Model.Ordine", b =>
                {
                    b.HasOne("esercizioUnikey.Core.Model.Persona", "Persona")
                        .WithMany("Ordini")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("esercizioUnikey.Core.Model.Prodotto", b =>
                {
                    b.HasOne("esercizioUnikey.Core.Model.Ordine", "Ordine")
                        .WithMany("Prodotti")
                        .HasForeignKey("OrdineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
